from langchain_openai import ChatOpenAI
from langchain_core.messages import AIMessage
from models.state import AgentState
import time


class ClinicalDocsAgent:
    """LangGraph Clinical Documentation Agent for medical records and reports"""
    
    def __init__(self):
        self.llm = ChatOpenAI(model="gpt-4", temperature=0.1)
        self.name = "clinical_docs_agent"
    
    def __call__(self, state: AgentState) -> AgentState:
        """Generate clinical documentation and reports"""
        start_time = time.time()
        
        try:
            # Generate clinical documentation
            response_message = self._generate_clinical_documentation(state)
            
            # Update state
            processing_time = time.time() - start_time
            
            return {
                **state,
                "current_agent": "clinical_docs_agent",
                "clinical_context": {
                    "documentation_generated": True,
                    "report_type": "consultation_summary"
                },
                "clinical_notes": state.get("clinical_notes", []) + 
                                ["Clinical documentation generated"],
                "tools_used": state.get("tools_used", []) + ["clinical_docs"],
                "processing_time": processing_time,
                "workflow_complete": True,
                "messages": state["messages"] + [AIMessage(content=response_message)]
            }
            
        except Exception as e:
            return self._create_error_response(state, f"Documentation error: {str(e)}")
    
    def _generate_clinical_documentation(self, state: AgentState) -> str:
        """Generate clinical documentation based on session"""
        
        patient_id = state.get("patient_id", "Unknown")
        urgency = state.get("urgency_level", "Not assessed")
        clinical_notes = state.get("clinical_notes", [])
        
        return f"""
ðŸ“‹ CLINICAL CONSULTATION SUMMARY

Patient ID: {patient_id}
Consultation Date: Today
Urgency Level: {urgency}

CLINICAL NOTES:
{chr(10).join(f"â€¢ {note}" for note in clinical_notes) if clinical_notes else "â€¢ No specific clinical notes recorded"}

ASSESSMENT:
â€¢ Patient consulted with AI cardiology system
â€¢ Appropriate triage and routing completed
â€¢ Recommendations provided based on urgency level

PLAN:
â€¢ Follow recommended medical advice
â€¢ Continue monitoring as appropriate
â€¢ Return for follow-up as scheduled

This documentation has been generated by the Cardiology AI system.
All recommendations should be reviewed by qualified medical personnel.
"""
    
    def _create_error_response(self, state: AgentState, error_message: str) -> AgentState:
        """Create error response state"""
        return {
            **state,
            "current_agent": "clinical_docs_agent",
            "workflow_complete": True,
            "requires_human_review": True,
            "messages": state.get("messages", []) + [AIMessage(
                content=f"Documentation Error: {error_message}. Please contact support."
            )]
        }