#!/bin/bash

# Pre-commit hook to encrypt sensitive files before commit
# This prevents real API keys from being committed to the repository

set -e

echo "üîç Checking for sensitive data before commit..."

# Define sensitive files
SENSITIVE_FILES=(".env" ".env.local" ".env.production")
ENCRYPTED_DIR=".encrypted"

# Create encrypted directory if it doesn't exist
mkdir -p "$ENCRYPTED_DIR"

# Function to check for API keys in staged files
check_api_keys() {
    local file=$1
    
    # Patterns to detect API keys
    local patterns=(
        "sk-[a-zA-Z0-9]{20,}"  # OpenAI API keys
        "OPENAI_API_KEY=sk-"   # OpenAI in env files
        "API_KEY=.*[a-zA-Z0-9]{20,}"  # Generic API keys
        "SECRET_KEY=.*[a-zA-Z0-9]{20,}"  # Secret keys
        "ACCESS_TOKEN=.*[a-zA-Z0-9]{20,}"  # Access tokens
    )
    
    for pattern in "${patterns[@]}"; do
        if git show ":$file" 2>/dev/null | grep -q "$pattern"; then
            echo "‚ùå BLOCKED: Found potential API key in $file"
            echo "   Pattern: $pattern"
            return 1
        fi
    done
    return 0
}

# Function to encrypt sensitive files
encrypt_sensitive_files() {
    for file in "${SENSITIVE_FILES[@]}"; do
        if [ -f "$file" ]; then
            echo "üîê Found $file - checking if encryption is needed..."
            
            # Check if file has been modified
            if git diff --cached --name-only | grep -q "^$file$"; then
                echo "‚ö†Ô∏è  $file is staged for commit - it should be encrypted first"
                echo "   Run: python scripts/secure_env.py encrypt-all"
                echo "   Then: git add .encrypted/ && git reset HEAD $file"
                return 1
            fi
        fi
    done
    return 0
}

# Check all staged files for API keys
echo "üîç Scanning staged files for API keys..."
staged_files=$(git diff --cached --name-only)

for file in $staged_files; do
    if [ -f "$file" ]; then
        # Skip checking encrypted files and example files
        if [[ "$file" == *.enc ]] || [[ "$file" == *.example ]] || [[ "$file" == *.template ]]; then
            continue
        fi
        
        if ! check_api_keys "$file"; then
            echo ""
            echo "üö´ COMMIT BLOCKED: API keys detected in staged files"
            echo "   Please remove API keys or use the encryption system"
            echo ""
            echo "üí° Solutions:"
            echo "   1. Move API keys to .env file: python scripts/secure_env.py encrypt-all"
            echo "   2. Use placeholder values (sk-placeholder-...)"
            echo "   3. Remove from staging: git reset HEAD $file"
            echo ""
            exit 1
        fi
    fi
done

# Check for unencrypted sensitive files being committed
if ! encrypt_sensitive_files; then
    echo ""
    echo "üö´ COMMIT BLOCKED: Unencrypted sensitive files detected"
    echo ""
    exit 1
fi

echo "‚úÖ Pre-commit checks passed!"
echo ""